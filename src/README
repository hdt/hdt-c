 HDT IT! prototype v.0.7 2010. All rights reserved.***
    University of Valladolid (Spain)

    This is an experimental prototype. Contacting the authors:
    Javier D. Fernandez & Miguel A. Martinez-Prieto
    ETIyT. Departamento de Informatica.
    Camino del Cementerio s/n
    47011 Valladolid (Spain)



Overview
=================

HDT-It! 0.7 is a C++ tool performing this process. It is a free software / Open Source C tool that makes use of Raptor library to provide a set of parsers and serializers between HDT and the main RDF syntaxes. It also provides a basic querying interface

RDF HDT (Header-Dictionary-Triples) is a format for publishing and exchanging RDF data at large scale. RDF HDT represents RDF in a compact manner, natively supporting splitting huge RDF graphs into several chunks. It is designed to allow high compression rates. This is achieved by organizing and representing the RDF graph in terms of three main components: Header, Dictionary and Triples structure. The Header includes extensible metadata required to describe the RDF data set and its organization. The Dictionary organizes all vocabulary present in the RDF graph in a manner that permits rapid search and high levels of compression. The Triples component comprises the pure structure of the underlying graph in a compressed form.


Basic Installation
=================

   Briefly, the shell command 'make' in src folder should install this program.

   Dependencies: Raptor RDF Parser Library v.1.4  (for more information see: http://librdf.org/raptor/)
                 Libcds (included with the program)

Execution
=================

./hdt [Options]
        -p --parse <config_file>              Parse data set within the given <config_file>
        -l --load <file>                      Load HDT structure into memory. Access triples console if serialize command is not given
            -s --serialize [format]           Serialize the loaded HDT representation to a given format: 
						ntriples (default)
						rdfxml
						turtle
						rdfxml-abbrev
						rdfxml-xmp
						atom
						json-triples
						json
						dot
            -o --output <file>                   Serialize output (output.rdf by default)
        -h --help                             Show this help
        -c --console                          Entering console mode


Example
=================

After installation, run:

$> ./hdt -p ../test.config
# This creates the HDT representation

$>./hdt -l ../examples/test
#This loads the HDT representation and gives you access to the loading console



Limitations and BUGS
=================

03/12/2010:
	- Final Huffman/PPM/GZIP... compression must be made manually over the HDT representation.  
	- Escaping sequences problems in raptor serializer
